{"version":3,"sources":["API/youtube.js","Components/selectedVideo.js","Components/videoList.js","Components/search.js","App.js","serviceWorker.js","index.js","Components/youtube.module.css"],"names":["apiKey","getYoutubeData","searchText","a","axios","get","params","part","maxResults","key","q","data","console","log","fetchMostPopularVideos","chart","regionCode","videoCategoryId","popularVideoData","SelectedVideo","props","url","videoId","className","styles","videoPlayer","src","title","frameBorder","allowFullScreen","VideoList","videoList","Divider","section","Item","Group","link","map","d","index","onClick","e","onSelectItem","handleClick","Image","size","imageDetails","Content","Header","Meta","channel","Description","description","substring","SearchComponent","handleSubmit","event","preventDefault","onSearch","state","value","handleChange","setState","target","onSubmit","this","Input","action","icon","placeholder","onChange","searchbar","Component","App","videoListData","selectedVideo","handleSearch","searchedContent","result","fetchVideoListData","category","items","item","id","snippet","channelTitle","thumbnails","high","handleVideoSelect","videoIndex","filter","videoData","Object","keys","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","module","exports"],"mappings":"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","file":"static/js/main.35d3ff8f.chunk.js","sourcesContent":["import axios from 'axios';\r\nconst url=\"https://www.googleapis.com/youtube/v3/search\";\r\nconst apiKey=\"AIzaSyBvx2G0l85dyEz8YKtvnVsI6fAX-j8Y-Jg\";\r\n \r\n// https://developers.google.com/apis-explorer/#p/youtube/v3/youtube.search.list?\r\n//         part=snippet\r\n//         &chart=mostPopular\r\n//         &regionCode=es\r\n//         &videoCategoryId=17\r\n export const getYoutubeData=async(searchText)=>{\r\n     try\r\n     {\r\n        const data= await axios.get(url,{\r\n            params:{\r\n                part:'snippet',\r\n                maxResults:7,\r\n                key:apiKey,\r\n                q:searchText\r\n            }\r\n         });\r\n         return data.data;\r\n     } \r\n     catch(error){\r\n         console.log(error);\r\n     }    \r\n }\r\n export const fetchMostPopularVideos=async()=>{\r\n     try{\r\n        const popularVideoData=await axios.get('https://www.googleapis.com/youtube/v3/videos',{\r\n            params:{\r\n                part:'snippet',\r\n                chart:'mostPopular',\r\n                regionCode:'IN',\r\n                videoCategoryId:17,\r\n                maxResults:7,\r\n                key:apiKey\r\n            }            \r\n        });\r\n        console.log(popularVideoData.data);\r\n        return popularVideoData.data;\r\n     }\r\n     catch(error){\r\n\r\n     }\r\n }","import React from 'react';\r\nimport styles from './youtube.module.css';\r\nconst SelectedVideo=(props)=>{\r\n    console.log(props.data);\r\n    const url=`https://www.youtube.com/embed/${props.data.videoId}?rel=0&hd=1&autoplay=1`;\r\n    return (\r\n        <div className={styles.videoPlayer}>         \r\n        <iframe src={url} title={props.data.title} frameBorder=\"0\" allowFullScreen></iframe>                  \r\n        </div>\r\n    )\r\n}\r\nexport default SelectedVideo;\r\n","import React from 'react';\r\nimport styles from './youtube.module.css';\r\nimport { Item,Divider } from 'semantic-ui-react';\r\nconst VideoList=(props)=>{\r\n    console.log(props.data);\r\n    function handleClick(index){\r\n       // alert(index);\r\n       props.onSelectItem(index);\r\n    }\r\n    return (\r\n        <div className={styles.videoList}>\r\n            <Divider section/>\r\n            <Item.Group link>\r\n            {\r\n                props.data.map((d,index)=>{\r\n                    return <Item key={index} onClick={e=> handleClick(index)}>\r\n                    <Item.Image size='small' src={d.imageDetails.url} />\r\n                    <Item.Content>\r\n                  <Item.Header>{d.title}</Item.Header>\r\n                  <Item.Meta>{d.channel}</Item.Meta>\r\n                      <Item.Description>{d.description.substring(0,100)}</Item.Description>\r\n                    </Item.Content>\r\n                  </Item>\r\n                })\r\n            }\r\n            </Item.Group>            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default VideoList\r\n","import React, { Component } from 'react';\r\nimport { Input } from 'semantic-ui-react';\r\nimport styles from './youtube.module.css';\r\nclass SearchComponent extends Component {   \r\n    constructor(props) {\r\n        super(props)    \r\n        this.state = {\r\n             value:''\r\n        }\r\n    }\r\n    handleSubmit=(event)=>{\r\n        event.preventDefault();\r\n        this.props.onSearch(this.state.value);        \r\n    }\r\n    handleChange=(event)=>{\r\n        this.setState({\r\n            value:event.target.value\r\n        })\r\n     }\r\n    render() {\r\n        return (  \r\n            <form onSubmit={this.handleSubmit}>\r\n                 <Input action={{ icon: 'search' }} placeholder='Search...' \r\n                 value={this.state.value}\r\n                onChange={this.handleChange}               \r\n                className={styles.searchbar}/>  \r\n            </form>                                                                                  \r\n        )\r\n    }\r\n}\r\n\r\nexport default SearchComponent;\r\n","import React, {Component} from 'react';\nimport './App.css';\nimport {getYoutubeData,fetchMostPopularVideos} from './API/youtube';\nimport SelectedVideo from './Components/selectedVideo';\nimport VideoList from './Components/videoList';\nimport SearchComponent from './Components/search';\nimport { Icon } from 'semantic-ui-react'\nclass App extends Component{\n  videoListData=[];\n  selectedVideo={};\n  constructor(props) {\n    super(props)  \n    this.state = {\n       videoListData:[],\n       selectedVideo:{}\n    }\n  } \n  async componentDidMount(){\n    const data=await fetchMostPopularVideos();\n    this.fetchVideoListData(data,'trending');\n    this.setState({\n      videoListData:this.videoListData\n    })\n  }\n  handleSearch=async(searchedContent)=>{\n    console.log(searchedContent);\n    this.selectedVideo={};\n    const result=await getYoutubeData(searchedContent);  \n    console.log(result);  \n    this.fetchVideoListData(result,'searched');\n    console.log(this.videoListData);\n    this.setState({\n      videoListData:this.videoListData,\n      selectedVideo:this.selectedVideo\n    });\n}\nfetchVideoListData=(data,category)=>{\n  category === 'searched'? \n  this.videoListData=data.items.map((item)=>{\n   return{\n     videoId:item.id.videoId,\n     channel:item.snippet.channelTitle,\n     description:item.snippet.description,\n     title:item.snippet.title,\n     imageDetails:item.snippet.thumbnails.high\n   }\n }):this.videoListData=data.items.map((item)=>{\n  return{\n    videoId:item.id,\n    channel:item.snippet.channelTitle,\n    description:item.snippet.description,\n    title:item.snippet.title,\n    imageDetails:item.snippet.thumbnails.high\n  }\n})\n\n}\nhandleVideoSelect=(videoIndex)=>{\nthis.selectedVideo=this.videoListData.filter((videoData,index)=>index === videoIndex);\nconsole.log(this.selectedVideo);\nthis.setState({\n  selectedVideo:this.selectedVideo\n});\n}\n  render(){\n    console.log(this.state.selectedVideo);\n    return <div>         \n      {/* <div style={{display:'flex',flexDirection:'column'}}>\n      <Icon link name=\"youtube\" color=\"red\" size=\"huge\"/> My Youtube */}\n      <SearchComponent onSearch={this.handleSearch}/>                \n      <br/>\n      {\n        Object.keys(this.state.selectedVideo).length ?  \n        <SelectedVideo data={this.state.selectedVideo[0]}/> : null\n      }   \n      {\n        (this.state.videoListData.length && !Object.keys(this.state.selectedVideo).length)\n        ? <VideoList onSelectItem={this.handleVideoSelect} data={this.state.videoListData}/> : null\n      }        \n    </div>\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'semantic-ui-css/semantic.min.css';\nReactDOM.render(  \n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"searchbar\":\"youtube_searchbar__-rIdo\",\"videoList\":\"youtube_videoList__2npOT\",\"videoPlayer\":\"youtube_videoPlayer__2b8v2\"};"],"sourceRoot":""}